컬렉션: 객체 수집 및 저장 역할
프레임 워크: 사용 방법이 지정된 라이브러리


컬렉션:
	LIST:
		- 순서 유지, 저장 가능하고 중복 저장 가능
		- 구현 가능 클래스: ArrayList, VectorList, LinkedList
		- 자동으로 부여된 인덱스를 활용해 객체 관리
		- 인덱스로 객체 검색, 삭제 기능 제공
		- 참조 타입과 같이 객체의 번지로 저장됨
		- 중복 저장시 같은 객체 참조
	
		ArrayList: 
			- 객체가 인덱스로 관리되고 저장 용량 초과시 자동적으로 저장 용량을 능가 시킴
			- 저장시 object로 변환되고 찾을시 원래 타입으로 저장됨으로 실행 성능 떨어짐
			
		VectorList: 
			- Arraylist와 동일한 내부 구조를 가짐
			- 동기화된 메소드로 구성되어 있어 멀티스레드가 동시에 메소드 실행 불가 
			- 이를 통해 안전한 객체 추가 삭제 가능 
		
		LinkedList: 
			- Arraylist와 동일한 내부 구조를 가지만 인덱스 참조 방식에 차이 있음
			- 인접 참조를 통해 링크를 체인 형식으로 관리 
			- 특정 인덱스 삭제시 앞뒤 링크만 변경되고 나머지 링크 유지

	SET: 
		- 순서 유지 없이 저장하고 중복 저장 가능
		- 인덱스로 관리 하지 않아 인덱스를 매개로 값는 메소드 없음
		- 제넥릴 파라미터
		- 구현 가능 클래스: HashSet, TreeSet
	
		HashSet:
			- 객체를 무순서로 저장하고 중복을 허용하지 않는다
			- 중복 판단시 같은 인스턴스를 뜻하지 않음 
			- 즉 동일한 내용이라면 인스턴스가 달라도 중복 되지 않음
		
	MAP:
		- 키와 값이 세트로 구성된 Entry 객체
		- 키 중복 불가
		- 구현 가능 클래스: HashMap, Hashtable, TreeMap, Propertise
	
		TreeMap: 
			- 이진트리 구조: 여러 개의 노드가 트리 형태로 연결된 구조. 하나의 노드에서 시작해 각 노드는 최대 2개의 노드 연결 가능. 부모 노드의 값보다 작을 시 왼쪽 크면 오른쪽에 저장. 그룹핑을 통한 검색 능력 향상
	
	LIFO: 
		- 후입선출 컬랙션
		- 스택 클래스의 자료구조 형식
		
	FIFO:
		- 선입선출 컬랙션
QUEUE 인터페이스의 자료구조 형식
